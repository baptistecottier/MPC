/**
  * \file gate_functions.h
  * \brief functions for AND gate garbling and evaluation
*/

#ifndef GATE_FUNCTIONS_H
#define GATE_FUNCTIONS_H

#include "auxiliary_functions.h"
#include <stdio.h>
#include <stdlib.h>
#include "gmp.h"
#include <openssl/sha.h>

/**
  * \typedef Alice_struct
  * \brief Structure for Alice's variables
  */
typedef struct Alice_struct {
  uint8_t * ct_Alice ; /**< Alice's input ciphertext */
  uint8_t * ct_gamma ; /**< Alice's new input ciphertext */
  uint8_t ** Alice_keys ; /**< Alice's input keys */
  uint8_t ** trans_table ; /**< XOR gates keys*/
  uint8_t *** ct_AND ; /**< AND gates ciphertexts */
} Alice_struct ;

/**
  * \typedef Bob_struct
  * \brief Structure for Bob's variables
  */
typedef struct Bob_struct {
	uint8_t * rho ; /**< Bob's new input */
  uint8_t * ct_Alice ; /**< Alice'es input ciphertext */
	uint8_t * ct_gamma ; /**< Alice's new input ciphertext */
  uint8_t ** Alice_keys ;  /**< Alice's input keys */
  uint8_t ** trans_table ; /**< Translation table (generated by Alice) */
  uint8_t *** ct_AND ; /**< AND gates ciphertexts */
} Bob_struct ;






void gate_and_garb(mpz_t  A_out, mpz_t* ct_AND, mpz_t* A1, mpz_t* A2,mpz_t offset);
void gate_xor_garb(mpz_t* X_out, mpz_t X1, mpz_t X2, mpz_t offset);
void gate_and_eval(mpz_t A_out, mpz_t A1, mpz_t A2, mpz_t * AND_ct);
void gate_xor_eval(mpz_t X_out, mpz_t X1, mpz_t X2);

void cmp_Alice_set_keys(uint8_t ** Alice_input_keys, mpz_t ** kA, mpz_t gamma);
void cmp_Alice_garbling(mpz_t ** kA, mpz_t ** kB, mpz_t * trans_table, mpz_t ** ct_AND);
int cmp_Bob_eval(mpz_t * Alice_input_keys, mpz_t * Bob_input_keys, mpz_t ** ct_AND, mpz_t * trans_table);
Alice_struct * cmp_Alice_init();
void cmp_Alice_clear(Alice_struct * A);
Bob_struct * cmp_Bob_init();
void cmp_Bob_clear(Bob_struct * B);

#endif
