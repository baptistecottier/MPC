/**
  * \file oblivious_transfer.h
  * \brief functions for oblivious transfers using twisted Edwards curves
*/

#ifndef OBLIVIOUS_TRANSFER_H
#define OBLIVIOUS_TRANSFER_H

#include <stdlib.h>
#include <stdio.h>

#include "gmp.h"
#include "time.h"
#include "twisted_edwards_curves.h"
#include "gate_functions.h"

/**
  * \typedef OT_sender
  * \brief Structure for the sender's variables in the oblivous tranfer
  */
typedef struct OT_sender {
	uint8_t * sen_y ; /**< Random value generated by the sender */
	ted_point * sen_S ; /**< Common secret for sender and receiver */
	uint8_t * sen_enc_S ; /**< Encoded value of the point S */
	ted_point * sen_T ; /**< Private secret for sende r*/
	uint8_t ** sen_enc_R ; /**< Encoded values of the points R */
	uint8_t *** sen_keys ; /**< Derivated keys sent to receiver */
} OT_sender ;

/**
  * \typedef OT_receiver
  * \brief Structure for the receiver's variables in the oblivous tranfer
  */
typedef struct OT_receiver {
	uint8_t ** rec_x ; /**< Random values generated by the receiver */
 	uint8_t * rec_enc_S; /**< Encoded value of the point S */
	ted_point ** rec_R ; /**< ted_point's generated by receiver to retrieve his input keys */
	uint8_t ** rec_enc_R; /**< Encoded values of the points R */
	uint8_t *** rec_keys ; /**< Derivated keys received from the sender */
} OT_receiver ;

int OT_sender_setup( uint8_t * enc_S, mpz_t y, ted_point* S, ted_point* T);
int OT_receiver_choose( uint8_t ** enc_R , mpz_t * x, ted_point** R,  uint8_t * enc_S, mpz_t input_receiver);
int OT_sender_key_derivation(mpz_t** K, mpz_t** M,  uint8_t ** enc_R, ted_point* T, mpz_t y);
int OT_receiver_retrieve(mpz_t * receiver_input_keys, mpz_t ** K,mpz_t* x,  uint8_t * S, mpz_t rho);
OT_sender * OT_sender_init();
OT_receiver * OT_receiver_init();
void OT_receiver_clear(OT_receiver * OTR);
void OT_sender_clear(OT_sender * OTS);
#endif
